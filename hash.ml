let codes =
[ "1",
((20, "\203\204\191\252\219}~w9\196'\141\161%N\134"),
 [(19, "l\189E\159\168\231\169\196\154\213CJ\128D\249\156");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (16, "\221\193=\138\247\007AM\139\t.0n\244\159\002");
  (5, "d\198G:\248\021\197(\005+\018\006}\162t\198");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (6, "r\015<\25043\225OFM\156\203\156w\0182");
  (5, "\223\rn\239\157\189\255\224\195\017X\140\012\181s\175");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (3, "^r\1515\184q\028\182y\231\188:\025\253\141V");
  (2, "\139\161\020\134)\242\167}\160MZ\218_\002\031\221");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252")]);

"2",
((20, "\203\204\191\252\219}~w9\196'\141\161%N\134"),
 [(19, "l\189E\159\168\231\169\196\154\213CJ\128D\249\156");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (16, "\221\193=\138\247\007AM\139\t.0n\244\159\002");
  (5, "d\198G:\248\021\197(\005+\018\006}\162t\198");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (6, "r\015<\25043\225OFM\156\203\156w\0182");
  (5, "\223\rn\239\157\189\255\224\195\017X\140\012\181s\175");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (3, "^r\1515\184q\028\182y\231\188:\025\253\141V");
  (2, "\139\161\020\134)\242\167}\160MZ\218_\002\031\221");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252")]);

"3",
((29, "6\128f?\129\239\022\018\022\222\183\187\148.}\017"),
 [(28, "\218B\236\028W\240f\244\218\193r)B\179\250~");
  (26, "\175 xO\189`\131\127\1630Z\203\195=\130\224");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (22, "rdE\132\024U\171\230+)\250\031U\199\228\021");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (16, "\221\193=\138\247\007AM\139\t.0n\244\159\002");
  (5, "d\198G:\248\021\197(\005+\018\006}\162t\198");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (6, "r\015<\25043\225OFM\156\203\156w\0182");
  (5, "\223\rn\239\157\189\255\224\195\017X\140\012\181s\175");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (3, "\137\183\2410\249\138\253\191k\248\197\236f\019\190Z");
  (2, "\172\173}\235=\143!\164qO\210\180\188\224\016h");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (3, "^r\1515\184q\028\182y\231\188:\025\253\141V");
  (2, "\139\161\020\134)\242\167}\160MZ\218_\002\031\221");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~");
  (2, "\230\149[\170\200\194\1593}M\030\172\016\238gv");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~");
  (2, "\230\149[\170\200\194\1593}M\030\172\016\238gv");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198")]);

"4",
((22, "\224\187\239\029\2548'\"\000\244\214\r\172\227\203w"),
 [(21, "\186C\204\205\024R;\130*\168\000\142\144\168\194\208");
  (16, "\2078\243\247B\192\219\213S\230\1559j\252j ");
  (15, "\178\253\184\153\204\138\197n\172\226&f\205|\1749");
  (14, "G\183\190\130\208\132\023Q\143\217\177\225E9j8");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (11, "\1974\204\159\196\t\150m\207D\130\\\025\181\214\214");
  (6, "\031SW\206\163\246\174_\184\230\127\196a\175\232\150");
  (5, "\024\014\182\205\196i3\155[\202F\240V\143\001\197");
  (1, "\241O\n\030\134\176}/A\241\244\031%6FT");
  (3, "BEm/\134\145\029x\214\253.OJ\001 $");
  (2, "k\202\141\151\025\200\134\135\149\029\241I\237\023\145]");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (3, "BEm/\134\145\029x\214\253.OJ\001 $");
  (2, "k\202\141\151\025\200\134\135\149\029\241I\237\023\145]");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (1, "\241O\n\030\134\176}/A\241\244\031%6FT");
  (4, "\235\140~q\233qe\1943eW\017\229\243zs");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198")]);

"5",
((25, "9\007)\005\205\128\221\222\213\227]\163*WN\150"),
 [(24, ":\235\197\196JZ\218\246\154\143\2288\236P\144\165");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (21, "\186C\204\205\024R;\130*\168\000\142\144\168\194\208");
  (16, "\2078\243\247B\192\219\213S\230\1559j\252j ");
  (15, "\178\253\184\153\204\138\197n\172\226&f\205|\1749");
  (14, "G\183\190\130\208\132\023Q\143\217\177\225E9j8");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (11, "\1974\204\159\196\t\150m\207D\130\\\025\181\214\214");
  (6, "\031SW\206\163\246\174_\184\230\127\196a\175\232\150");
  (5, "\024\014\182\205\196i3\155[\202F\240V\143\001\197");
  (1, "\241O\n\030\134\176}/A\241\244\031%6FT");
  (3, "BEm/\134\145\029x\214\253.OJ\001 $");
  (2, "k\202\141\151\025\200\134\135\149\029\241I\237\023\145]");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (3, "BEm/\134\145\029x\214\253.OJ\001 $");
  (2, "k\202\141\151\025\200\134\135\149\029\241I\237\023\145]");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (1, "\241O\n\030\134\176}/A\241\244\031%6FT");
  (4, "\235\140~q\233qe\1943eW\017\229\243zs");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252")]);

"6",
((13, " W\240\191\132\245\139\236\146m^\"O\006X\235"),
 [(12, "\168{\204\162\147g-\17448\241\226\186\149:A");
  (5,
   "j\241\022\174\195\128\184\200\003\162\251\233\215\132r\131");
  (4, "\241\234\137\028\019\214\185\143\230s\025D+\017\144\203");
  (3, "\129rM\140\188\213\182C\134/u\221-\133g\188");
  (1, "\n\020\000|N\007\233\211L\230 \230W\241\202\224");
  (1, "^\245.|7L\222k>\216\148\214L\186y\149");
  (1, "x\166)\224\150\171\159\002q\159\012\217\183:t\252");
  (1, "X\232\200F\131\135K#$\147\130i\2262d\198");
  (3, "^r\1515\184q\028\182y\231\188:\025\253\141V");
  (2, "\139\161\020\134)\242\167}\160MZ\218_\002\031\221");
  (1, "\212\029\140\217\143\000\178\004\233\128\t\152\236\248B~")])
]

let seq_to_list s =
  Seq.fold_left (fun l x -> x :: l) [] s

let string_of_hash s =
  let o = ref "" in
  String.iter (fun c -> o := !o ^ Printf.sprintf "%xd" (Char.code c)) s;
  !o

let hashes =
  let t = Hashtbl.create 13 in
  let c = ref 0 in
  let index h =
    try Hashtbl.find t h with Not_found -> incr c; Hashtbl.add t h !c; !c
  in
  let factorized =
    List.(map (fun (c, ((w0, h0), e)) ->
           (c, w0, index h0, map (fun (w, h) -> (w, index h)) e)) codes)
  in
  Printf.printf "\\begin{multicols}{2}\n";
  Printf.printf "\\[\\begin{array}{rcl}\n";
  Hashtbl.to_seq t |> seq_to_list
  |> List.sort (fun (_, i1) (_, i2) -> compare i1 i2)
  |> List.map (fun (h, i) ->
         (if i = 20 then (
           Printf.sprintf "\n\\end{array}\\\\\n"
           ^ Printf.sprintf "\\begin{array}{rcl}\n"
         ) else "")^
         Printf.sprintf "%02d &=& %s \\\\" i (string_of_hash h))
  |> String.concat "\n"
  |> output_string stdout;
  Printf.printf "\n\\end{array}\\\\\n\\]";
  Printf.printf "\\end{multicols}\n";
  Printf.printf "\\[\\begin{array}{rcl}\n";
  List.iter (fun (c, w0, h0, e) ->
                  Printf.printf "E(D_%s) &=& \\{ \\begin{bmatrix} %02d \\\\ %02d \\end{bmatrix} %s \\} \\\\[1em]\n" c
                    h0 w0 (String.concat "\\,"
                             (List.mapi (fun i (w, h) ->
                                  (if i = 22 then Printf.sprintf "\\\\ & & \\;\\;" else "") ^
                                    Printf.sprintf "\\begin{bmatrix} %02d \\\\ %02d \\end{bmatrix}" h w)
                                e))) factorized;
  Printf.printf "\\end{array}\\]\n"
